<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
    <link href="../../main_css/main_body_css/img/favicon.png" rel="icon">
    <!-- Google Fonts -->
    <link href="https://fonts.googleapis.com/css?family=Poppins:300,400,500,600,700" rel="stylesheet">
    <link rel="stylesheet" href="/css/video-player.css">
    <link href="../../main_css/nav_bar_css/lib/bootstrap/css/bootstrap.min_copy.css" rel="stylesheet">
    <link href="../../main_css/nav_bar_css/lib/font-awesome/css/font-awesome.min.css" rel="stylesheet">
    <link href="../../main_css/nav_bar_css/lib/animate/animate.min.css" rel="stylesheet">
    <link href="../../main_css/nav_bar_css/lib/ionicons/css/ionicons.min.css" rel="stylesheet">
    <link href="../../main_css/nav_bar_css/css/style.css" rel="stylesheet">
    <script src="https://cdn.jsdelivr.net/npm/ethers@5.7.2/dist/ethers.umd.min.js"></script>
    <title>Video Player</title>
    <style>
        .card-box-b::before {
            content: none; /* Remove the content */
            display: none; /* Hide the pseudo-element */
        }
        #videoPlayer {
            font-family: Arial, sans-serif;
            max-width: 800px;
            margin: 0 auto;
            padding: 20px;
        }
        h1 {
            text-align: center;
        }
        #videoList {
            list-style-type: none;
            padding: 0;
        }
        #videoList li {
            margin-bottom: 10px;
        }
        #videoPlayer {
            width: 100%;
            max-width: 800px;
        }
        .error {
            color: red;
            font-weight: bold;
        }
    </style>
</head>
<body>
    <nav class="navbar navbar-default navbar-trans navbar-expand-lg fixed-top">
        <div class="container">
          <button class="navbar-toggler collapsed" type="button" data-toggle="collapse" data-target="#navbarDefault"
            aria-controls="navbarDefault" aria-expanded="false" aria-label="Toggle navigation">
            <span></span>
            <span></span>
            <span></span>
          </button>
          <a class="navbar-brand text-brand" href="/">Block<span class="color-b">Chain</span></a>
          <button type="button" class="btn btn-link nav-search navbar-toggle-box-collapse d-md-none" data-toggle="collapse"
            data-target="#navbarTogglerDemo01" aria-expanded="false">
            <span class="fa fa-search" aria-hidden="true"></span>
          </button>
          <div class="navbar-collapse collapse justify-content-center" id="navbarDefault">
            <ul class="navbar-nav">
              <li class="nav-item">
                <a class="nav-link" href="/">Home</a>
              </li>
              <li class="nav-item">
                <a class="nav-link" href="/about">About</a>
              </li>
              <li class="nav-item">
                <a class="nav-link" href="/main">Streams</a>
              </li>
              <li class="nav-item">
                <% if (!session.username) { %>
                  <a class="nav-link" href="/login" id="sign_in">Sign In</a>
                </li>
                <li class="nav-item">
                  <a class="nav-link" href="/register" id="sign_up">Sign Up</a>
                <% } else { %>
                  <a class="nav-link" href="/profile" id="profile">Profile</a>
                <% } %>
              </li>
            </ul>
          </div>
        </div>
    </nav>
    <section class="intro-single">
        <div class="container">
            <div class="row">
                <div class="col-md-12 col-lg-8">
                    <div class="video-player-container">
                        <h1 class="title-single" id="title-single">Video Player</h1>
                        <div class="video-controls">
                            <button id="connect-button" >Connect Wallet</button>
                            <div class="tip-container">
                                <span class="tip-label">Tip $</span>
                                <input type="number" id="amount-input" value="1" min="1" step="0.5">
                            </div>
                            <button id="send-button" disabled>
                                Send to <%= username %>
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </section>
    <video id="videoPlayer" controls>
        Your browser does not support the video tag.
    </video>
    <h2>Available Videos</h2>
    <section class="news-grid grid">
        <div class="container">
            <div class="row" id="videoList"></div>
        </div>
    </section>
    <div id="errorMessage" class="error"></div>

    <script>
      const videoPlayer = document.getElementById('videoPlayer');
      const videoList = document.getElementById('videoList');
      const errorMessage = document.getElementById('errorMessage');
      const numberToCategory = {
          '1': 'Shopify',
          '2': 'Day trading',
          '3': 'Gaming',
          '4': 'Investing',
          '5': 'Tech news',
      };

      // Fetch the list of videos from the server
      fetch('/api/videos')
          .then(response => {
              if (!response.ok) {
                  throw new Error(`HTTP error! status: ${response.status}`);
              }
              return response.json();
          })
          .then(data => {
              const videos = data.videoFiles || [];
              const videoInfo = data.videoInfo || [];
              const title = document.getElementById('title-single');
              let filePosition = 0;
              const videoSrc = '<%= video %>';
              const userSrc = '<%= usersrc %>';
              
              for (let i = 0; i < videoInfo.length; i++) {
                  if (videoSrc === videoInfo[i].name) {
                      filePosition = i;
                      break;
                  }
              }
              title.textContent = videoInfo[filePosition].title;
              videoPlayer.src = `/upload_vid_files/uploads/${videoSrc}`;
              videoPlayer.play();

              if (videos.length === 0) {
                  errorMessage.textContent = 'No videos found in the uploads directory.';
                  return;
              }

              videos.forEach(video => {
                  if (video !== videoSrc) {
                      const parts = video.split('+');
                      const username = parts[parts.length - 1];
                      if (username === userSrc) {
                          const col3 = document.createElement('div');
                          col3.className = 'col-md-3';

                          const cardbox = document.createElement('div');
                          cardbox.className = 'card-box-b card-shadow news-box';

                          const vidbox = document.createElement('div');
                          vidbox.className = 'img-box-b';

                          const cardOverlay = document.createElement('div');
                          cardOverlay.className = 'card-overlay';

                          const cardHeaderB = document.createElement('div');
                          cardHeaderB.className = 'card-header-b';

                          const cardCategoryB = document.createElement('div');
                          cardCategoryB.className = 'card-category-b';

                          const categoryLink = document.createElement('a');
                          categoryLink.className = 'category-b';
                          categoryLink.href = `/video-player?video=${encodeURIComponent(video)}&username=${encodeURIComponent(username)}`;
                          categoryLink.textContent = 'Play';
                          cardCategoryB.appendChild(categoryLink);

                          const cardTitleB = document.createElement('div');
                          cardTitleB.className = 'card-title-b';

                          const titleH2 = document.createElement('h2');
                          titleH2.className = 'title-2';

                          const titleLink = document.createElement('a');
                          filePosition = videoInfo.findIndex(info => video === info.name);
                          titleLink.innerHTML = videoInfo[filePosition].title;

                          titleH2.appendChild(titleLink);
                          cardTitleB.appendChild(titleH2);

                          const cardDate = document.createElement('div');
                          cardDate.className = 'card-date';

                          const categoryArray = videoInfo[filePosition].category;
                          const categories = categoryArray.map(cat => numberToCategory[cat]).join(', ');

                          const dateSpan = document.createElement('span');
                          dateSpan.className = 'date-b';
                          dateSpan.textContent = categories;

                          cardDate.appendChild(dateSpan);

                          cardHeaderB.appendChild(cardCategoryB);
                          cardHeaderB.appendChild(cardTitleB);
                          cardHeaderB.appendChild(cardDate);

                          cardOverlay.appendChild(cardHeaderB);

                          const videoElement = document.createElement('video');
                          videoElement.src = `/upload_vid_files/uploads/${video}`;

                          const canvas = document.createElement('canvas');
                          const context = canvas.getContext('2d');

                          videoElement.addEventListener('loadeddata', () => {
                              canvas.width = videoElement.videoWidth;
                              canvas.height = videoElement.videoHeight;
                              context.drawImage(videoElement, 0, 0, canvas.width, canvas.height);
                          });

                          let i = -1;
                          cardbox.onclick = () => {
                              i *= -1;
                              i < 0 ? videoElement.play() : videoElement.pause();
                          };

                          vidbox.appendChild(videoElement);
                          cardbox.appendChild(vidbox);
                          cardbox.appendChild(cardOverlay);
                          col3.appendChild(cardbox);
                          videoList.appendChild(col3);
                      }
                  }
              });
          })
          .catch(error => {
              console.error('Error:', error);
              errorMessage.textContent = `Error loading videos: ${error.message}`;
          });

        // Smart contract interaction
        let contract, accounts;
        
        const contractABI = [
          {
            "inputs": [
              {
                "internalType": "address payable",
                "name": "recipient",
                "type": "address"
              }
            ],
            "name": "sendTip",
            "outputs": [],
            "stateMutability": "payable",
            "type": "function"
          },
          {
            "inputs": [],
            "name": "getBalance",
            "outputs": [
              {
                "internalType": "uint256",
                "name": "",
                "type": "uint256"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          }
        ];

        const contractAddress = "0x5FbDB2315678afecb367f032d93F642f64180aa3";
        const connectWallet = async () => {
          if (window.ethereum) {
            try {
              await window.ethereum.request({ method: 'eth_requestAccounts' });
              accounts = await ethereum.request({ method: 'eth_accounts' });
              console.log('Connected account:', accounts[0]);
                          // Create a provider using ethers.js
              const provider = new ethers.providers.Web3Provider(window.ethereum);

              // Get the signer (account) to send transactions
              const signer = provider.getSigner();
              contract = new ethers.Contract(contractAddress, contractABI, signer);
              const connectButton = document.getElementById('connect-button');
              connectButton.textContent = "Connected";
              const sendButton = document.getElementById('send-button');
              sendButton.disabled = false;
              return accounts[0];
            } catch (error) {
              console.error("User denied account access", error);
            }
          } else {
            console.error("MetaMask not detected");
          }
        }

        document.getElementById('connect-button').addEventListener('click', connectWallet);

        const sendTip = async () => {
            const amountUSD = document.getElementById('amount-input').value;
            const amountETH = 0.000418; // Example: 1 ETH = 1500 USD (manually calculated)
            const amount = (amountUSD * amountETH).toFixed(18);
            const recipient = '<%= metamask %>'; // Ensure this is replaced correctly

            try {
                const tx = await contract.sendTip(recipient, {
                    value: ethers.utils.parseEther(amount) // Pass the value as an object
                });
                await tx.wait();
                alert('Tip sent successfully!');
            } catch (error) {
                console.error('Error sending tip:', error);
                alert('Failed to send tip.');
            }
        };

        document.getElementById('send-button').addEventListener('click', sendTip);

    </script>

    <!-- JavaScript Libraries -->
    <script src="../../main_css/nav_bar_css/lib/jquery/jquery.min.js"></script>
    <script src="../../main_css/nav_bar_css/lib/jquery/jquery-migrate.min.js"></script>
    <script src="../../main_css/nav_bar_css/lib/popper/popper.min.js"></script>
    <script src="../../main_css/nav_bar_css/lib/bootstrap/js/bootstrap.min.js"></script>
    <script src="../../main_css/nav_bar_css/lib/easing/easing.min.js"></script>
    <script src="../../main_css/nav_bar_css/lib/owlcarousel/owl.carousel.min.js"></script>
    <script src="../../main_css/nav_bar_css/lib/scrollreveal/scrollreveal.min.js"></script>
    <!-- Contact Form JavaScript File -->
    <script src="../../main_css/nav_bar_css/contactform/contactform.js"></script>
    <!-- Template Main Javascript File -->
    <script src="../../main_css/nav_bar_css/js/main.js"></script>
    <!-- Smart Contract -->
    <script src="../../smart_contracts/ignition/modules/Lock.js"></script>
</body>
</html>